@using FieldServiceOrganizer.Server.Services
@using FieldServiceOrganizer.Models
@using Azure.Cosmos

@inject ICosmosDbService CosmosDbService


@if (_locations == null)
{
    <p>Loading locations...</p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th></th>
            <th>Location</th>
            <th>Address</th>
            <th>City</th>
            <th>State</th>
            <th>Zip</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var location in _locations)
        {
            <tr>
                <td><input type="checkbox" /></td>
                <td>@location.OccupantName</td>
                <td>@location.FullAddress</td>
                <td>@location.City</td>
                <td>@location.State</td>
                <td>@location.Zip</td>
                <td>
                    <button class="btn btn-danger"
                            @onclick="@(async () => await DeleteLocation(location))">
                        Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
}

@code {

    private IEnumerable<Location> _locations;
    private ICosmosDbService _cosmosDbService;

    [Parameter]
    public IEnumerable<Location> Locations { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _cosmosDbService = CosmosDbService;

        try
        {
            _locations = await _cosmosDbService.GetAllAsync($"select * from c");
        }
        catch (CosmosException ex)
        {
            Console.WriteLine($"There was a problem loading the locations: {ex.Message}");
        }
    }

    private async Task DeleteLocation(Location location)
    {
        await _cosmosDbService.DeleteAsync(location);
        ocations = (await LoadLocations()).ToList();
    }
}
